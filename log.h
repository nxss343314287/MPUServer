/**************************************************************************//** @brief      Log interfaces. @author     chenzl @date       2011-07-11 @version    2.0  @tablename{ Modify History } @tablehead{ mender,  date,        modify,      description } @tabledata{ chenzl,  2011-07-11,  All,         New issue.  } @tablefoot  ******************************************************************************/#ifndef  _ATS_LOG_H_#define  _ATS_LOG_H_/* System header files */#include <stdio.h>#define  USE_LOG4C#ifdef  USE_LOG4C#include <log4c.h>#endif/* Project header files *//* None */#ifdef  __cplusplusextern "C" {#endif/*-- Global defines --*//* * Log Level */#ifdef  USE_LOG4C#define  LOG_EMERG    LOG4C_PRIORITY_FATAL    /**< @brief System is unusable. */#define  LOG_ALERT    LOG4C_PRIORITY_ALERT    /**< @brief Action must be taken immediately. */#define  LOG_CRIT     LOG4C_PRIORITY_CRIT     /**< @brief Critical conditions */#define  LOG_ERR      LOG4C_PRIORITY_ERROR    /**< @brief Error conditions. */#define  LOG_WARNING  LOG4C_PRIORITY_WARN     /**< @brief Warning conditions. */#define  LOG_NOTICE   LOG4C_PRIORITY_NOTICE   /**< @brief Normal but significant condition. */#define  LOG_INFO     LOG4C_PRIORITY_INFO     /**< @brief Informational. */#define  LOG_DEBUG    LOG4C_PRIORITY_DEBUG    /**< @brief Debug-level messages. */#else#define  LOG_EMERG    0   /**< @brief System is unusable. */#define  LOG_ALERT    1   /**< @brief Action must be taken immediately. */#define  LOG_CRIT     2   /**< @brief Critical conditions */#define  LOG_ERR      3   /**< @brief Error conditions. */#define  LOG_WARNING  4   /**< @brief Warning conditions. */#define  LOG_NOTICE   5   /**< @brief Normal but significant condition. */#define  LOG_INFO     6   /**< @brief Informational. */#define  LOG_DEBUG    7   /**< @brief Debug-level messages. */#endif#ifndef  LOG_LEVEL#define  LOG_LEVEL  LOG_DEBUG#endif/*-- Global typedefs --*//* None *//*-- Global variables --*/#ifdef  USE_LOG4Cextern log4c_category_t *log_category_p;#endif/*-- Global Functions --*//* Call log_init in main function, it will add log_destroy to atexit too. */int log_init(int argc, char *argv[]);void log_destroy(void);/* Set log property */int log_set_category(const char *name);/** * @brief Main interface log can be a macro or private function, or other library interface. */#ifdef  USE_LOG4C#define  log(level,format,...)  \		do {  \			const log4c_location_info_t locinfo = LOG4C_LOCATION_INFO_INITIALIZER(NULL);  \			log4c_category_log_locinfo(log_category_p, &locinfo, level, format, ##__VA_ARGS__);  \		} while (0)#else#define  log(level,format,...)  \		do {  \			time_t  now = time(NULL);  \			printf("%s\t [" #level "] " format "\n", ctime(&now), ##__VA_ARGS__);  \		} while (0)#endif/** * @brief Convenient interfaces for log. *//* Debug-level message. */#define  DLOG(format,...)   log(LOG_DEBUG, format, ##__VA_ARGS__)/* Infomation conditions. */#define  ILOG(format,...)   log(LOG_INFO, format, ##__VA_ARGS__)/* Warning conditions. */#define  WLOG(format,...)   log(LOG_WARNING, format, ##__VA_ARGS__)/* Error conditions. */#define  ELOG(format,...)   log(LOG_ERR, format, ##__VA_ARGS__)/* Fatal Error conditions. */#define  FLOG(format,...)   log(LOG_EMERG, format, ##__VA_ARGS__)#ifdef  __cplusplus}#endif#endif /* _ATS_LOG_H_ */